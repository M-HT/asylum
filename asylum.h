/*  asylum.h */

/*  Copyright Hugh Robinson 2006-2007.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>. */

void fspplot(fastspr_sprite*, char, int, int);

void init();
void abort_game();
int game();
void switchcolch();
void switchbank();
void switchbankins();
void showtext();
void texthandler();
void deathmessage();
void alfire();
void foundtarget(int x,int y,char target);
void bullets();  // the bullet handler (aliens fire these)
int makebul(int x,int y,int dx,int dy,int type,int flags);
void project();  // the projectile handler
void atomrocket(projent* r11,char* r0);
void projsplit(projent* r11);
void rocketsplit(projent* r11);
void rocketpair(projent* r11);
int makeproj(int x,int y,int dx,int dy,int type,int flags);
int foundmakeproj(projent* r10,int r8,int x,int y,int dx,int dy,int type,int flags);
int softmakeobj(int r0,int r1,int r2,int r3,int r4,int r5,int r6);
int makeobj(int r0,int r1,int r2,int r3,int r4,int r5,int r6);
int foundmakeal(alent* r10,int newalctr,int r0,int r1,int r2,int r3,int r4,int r5,int r6);
void seestars();
void seeifdead();
void wipearea(int r0,int r1,int r2,int r3);
void wipearearead(int r0,int r1,int r2,int r3);
void showscore();
void scoreadd();
void showstrength();
void fuelairproc();
void explogoquiet(int r1,int r2,int r3,int r4,int r5,int r6,alent* r10);
void explogomaybe(int r1,int r2,int r3,int r4,int r5,int r6,alent* r10);
void explogo(int r1,int r2,int r3,int r4,int r5,int r6,alent* r10);
void explocreate(int r1,int r2,int r3,int r4,int r5,int r6,alent* r10);
void explocreatequiet(int r1,int r2,int r3,int r4,int r5,int r6,alent* r10);
void embercreate(int r1,int r2,int r6);
void atomexplogo(int r1,int r2,int r3,int r4,int r5,int r6,alent* r10);
void screenwakeup();
void linecheck(char* r7,char* r8,char* r9);
void wakeupal();
void boxcheck(int r4,int r5,char** r7,char* r8,char* r9);
void dowakeup(char* r7);
void saveal();
void restoreal();
void moval();
void procal(alent* r11);
void alienwander(alent* r11,char* r5);
void almightjumpins(alent* r11);
void jumpyalwander(alent* r11);
void alienwanderfly(alent* r11);
void alienwandernojump(alent* r11);
void alienstopped(alent* r11);
void alienstoppedfly(alent* r11);
void almightjump(alent* r11);
void alpossjump(alent* r11);
void almightwelljump(alent* r11);
void alientestplat(alent* r11,char* r5);
void decoration(alent* r11);
void extender(alent* r11);
void alien1(alent* r11);
void alien2(alent* r11);
void alien3(alent* r11);
void alien4(alent* r11);
void alien5(alent* r11);
void alien6(alent* r11);
int alspinfire(alent* r11);
int alspinpowerfire(alent* r11,int r7);
void alien7(alent* r11);
void alien8(alent* r11);
void alien9(alent* r11);
void alien10(alent* r11);
void alien11(alent* r11);
void alien12(alent* r11);
void alien13(alent* r11);
void alien14(alent* r11);
void hamsterspecial(alent* r11);
void alkill(alent* r11);
void alshoot(alent* r11);
void alshootfast(alent* r11);
void alshootnutter(alent* r11);
void alshootnutterplus(alent* r11);
void alshootnuttermental(alent* r11);
void alshootmental(alent* r11);
void alsleep(int s,alent* r11);
void explo(alent* r11);
void exploins(alent* r11);
void booby(alent* r11);
void ember(alent* r11);
void flyingbonus(alent* r11);
void dyingbonus(alent* r11);
void scoreobj(alent* r11);
void plat1(alent* r11);
void plat2(alent* r11);
void plat3(alent* r11);
void plat4(alent* r11);
void plat5(alent* r11);
void platins(alent* r11, char r9);
void colchadd(alent* r11);
void bulcolchadd(alent* r11);
void bulcolchaddshort(alent* r11);
void platland(alent* r11, char r9);
void emberbooby(char* r0);
void emberbomb(char* r0,alent* r11);
void normbomb(char* r0,alent* r11);
void normbombsurvive(char* r0);
void fuelbomb(char* r0);
int plcolcheck(int x,int y,int dx,int dy);
void settestal();
void dvcheck(alent* r11);
void playerplot();
void plotmpmg();
void plotmpmgblam();
void plotrocket();
void plotrocketblam();
void bonusplot();
void bonusbonus();
void bonusreset();
void normreset();
void zonecheatread();
void cheatread();
void keyread();
void plmove();
void windcheck();
int seeifwind(char* r1, int retval);
void plattoobjins(char* r0,int r4);
void plplattoobj(char* r0);
void crumblecheck(char* r1);
void telep();
void playerfire();
void goblam();
void rocketblam();
void dofire();
void blamfire();
void firerocket();
void launchrocket();
void getarms();
void getrocket();
void getmpmg();
alent* bulcolcheck(int x,int y);
void colcheck(alent* al);
void rise(alent* r6,alent* al);
void platonhead(alent* r6,alent* al);
void platdestroy(alent* r6);
void platfire(alent* r6);
void platsurefire(alent* r6);
int headonroof(alent* r6);
int alheadcheck();
char* albcheck(alent* r11);
void bcheck();
void noleft(alent* r11);
void noright(alent* r11);
int fallinggap(alent* re);
void nodown(alent* r11);
void nodownifplat(alent* r11);
void noup(alent* r11);
char* translate(int r0,int r1);
char* fntranslate(int r0,int r1);
void backtranslate(char* r, int* x, int* y);
void bonuscheck();
void weaponcheck(char* r5);
void plbombcheck(char* r5);
int bombcheck(char* r5);
int atombomb(char* r5);
void procatom(char* r5);
int fuelairbomb(char* r5);
int normalbomb(char* r5);
int boobybomb(char* r5);
void bonusobjgot(alent* r11);
void bonuslim(char* r5);
void deadbonuslim(char* r5);
void bonusgot(char* r5);
void addbonus(char* r5, int r0);
void sortbonus(char r0);
void bonusnumb(int r9);
void bonus1();
void megabonus(char* r5);
void electrocute(char* r5);
void destroy(char* r5);
void shoottarget(char* r5);
void elecdestroy(char* r5);
void eleccheck(char* r10);
void elecdelete(int r4,char* r10);
void deletetwin(char* r5);
void deletepoint();
void mazeplot();
void backdrop();
int escapehandler();
void loselife();
void rejoin();
void adjustopt();
void copyscreen();
void setfullclip();
void writeclip();
void releaseclip();
void restartplayer();
void findplayer();
void showgamescreen();
void showlives();
void showchatscreen();
void showchatscores();
void clearkeybuf();
void setdefaults();
int options(int go);
int optionins();
void dosaveconf();
void getzone();
void choosecontrol();
void choosekeys();
void choosestick();
void tunegame();
void tunesound();
void soundfillin();
void tunevolume();
void maketestsound(int r1);
void tunespeed();
int selectkey(int x,int y,int xv,int yv,char* a);
int readopt(int maxopt);
int prelude();
void checkifarm3();
int checkifextend();
void permitid();
void loadconfig();
void saveconfig();
int getfiles();
void getvitalfiles();
void getmusicfiles();
void getgamefiles();
int getlevelfiles();
int retrievebackdrop();
int getneuronfiles();
void loadvitalfile(char* r1,char* path,char** space);
int loadhammered(char* r1,char* path,char** spaceptr);
int loadfile(char* r1,char* path,char** spaceptr);
void savescores();
void loadscores();
void setdefaultscores();
void fatalfile();
void showloading();
void filenotthere();
void filesyserror();
void badload();
int badlevelload();
void nomemory();
int filelength(char* name,char* path);
void showerror();
void showerrorok();
int errorwait();
void writediscname(char* r2);
void insertdisc(char* r2);
void errorhandler(int r0);
void exithandler(int r0);
void upcallhandler(int r0, char* r2);
void loadzone();
void enterneuron(int r1);
void exitneuron(int r1);
int showhighscore();
void updatehst();
int comparescore(char* r10);
void showhst();
void setup();
void wipesoundtab();
void wipetexttab();
void initprojtab();
void initbultab();
void initweapon();
void prepfueltab();
void scorezero();
void wipealtab();
void boardreg();
void backprep();
void backexec(Uint32* dst,Uint32* src);
void prepstrength();
void screensave();
void getvars();
void vduread();
int main();
void message(int x,int y,float xv,float yv,char* a);

void switchfspbank();
void startmessage();
void causeexplo(alent* r11);
void causeexplo(projent* r11);
void causeexplonopyro(alent* r11);
void causeexplonopyro(projent* r11);
void scorewipe();
void scorewiperead();
void explogonopyro(int r1,int r2,int r3,int r4,int r5,int r6,alent* r10);
void explogonopyroquiet(int r1,int r2,int r3,int r4,int r5,int r6,alent* r10);
void plattoexplo(alent* r11);
void deleteobj(alent* r11);
void blowup(alent* r11);
void plotarms();
void plattoobj(char* r0);
void decomptonot(char* r11);
void decomp(char* r11);
void decompins(char* r10,char* r11);
void soundupdate();
void insertdiscagain(char* r2);
void gethandlers();
void losehandlers();
void getstrengthtab();
void addtabinit();
void initrockettab();
void swi_bodgemusic_start(int a,int b);
void swi_bodgemusic_stop();
void swi_bodgemusic_volume(int v);
void swi_bodgemusic_load(int a,char* b);
void swi_sound_qtempo(int t);
void swi_sound_control(int c,int a,int p,int d);
int swi_sound_speaker(int s);
void swi_stasis_link(int a,int b);
void swi_stasis_control(int a,int b);
void swi_stasis_volslide(int a,int b,int c);
void swi_removecursors();
void osbyte_71();
char osbyte_79(char c);
char osbyte_7a();
void osbyte_7c();
int osbyte_81(int c);
void osbyte_f1(char c);
char swi_oscrc(int w,char* start,char* end,int bytes);
FILE* swi_osfind(int op, const char* name);
void swi_osgbpb(int n, FILE* f, char* start, char* end, int b);
int swi_osfile(int op, const char* name,char* start, char* end);
int swi_joystick_read(int a,int* x,int* y);
void swi_blitz_wait(int d);
void swi_blitz_screenexpand(char* screen);
void swi_blitz_smallretrieve();
void swi_blitz_screenretrieve();
void swi_blitz_screenflush();
int swi_blitz_hammerop(int op, char* name, char* path, char* space);
void swi_fastspr_screenbank(int b);
void swi_fastspr_clearwindow();
void swi_fastspr_setclipwindow(int x1, int y1, int x2, int y2);
int swi_readescapestate();
int swi_joystick_read(int a,int* x,int* y);
int initialize_sprites(char* start, fastspr_sprite* sprites, int max_sprites, char* end);

void update_keyboard();
void soundclaim(int r0,char r1,char r2,int r3,int r4,int r5,char r6,int r7,
	Mix_Chunk* static_chunk);
typedef struct fastspr_sprite;
